cars <- read.csv("Desktop/cars.csv")
library(readr)
#carsDatasetName <- read.csv(".csv file")
cars <- read.csv("Desktop/cars.csv")cars
#carsDatasetName <- read.csv(".csv file")
cars <- read.csv("Desktop/cars.csv")
#carsDatasetName <- read.csv(".csv file")
cars <- read.csv("C:/Users/letic/Desktop/cars.csv")
View(cars)
library(readxl)
cars <- read_excel("C:/Users/letic/Desktop/cars.csv")
View(cars)
#attributes(cars.csv)
attributes(cars.csv)
#attributes(cars.csv)
attributes(cars)
View(cars)
View(cars)
hist(cars$speed.of.car)
summary(cards)
summary(cars)
#attributes(cars.csv)
attributes(cars)
install.packages("nycflights13")
library(nycflights13)
flights
View(flights)
attributes(cars)
attributes(flights)
rownames(cars)
rownames(cars) <- cars$name.of.car
row.names(cars) <- cars$name.of.car
summary(flights)
str(flights)
a = 1
b = 3
a
b
b=4
b
b=1,2,3
b=1/2/3
b
b=1;2;3
b
b=1\2\3
b=1,2,3
b=1;2;3
b
b=4
a=
a=2
b\a
b/a
b <- sqrt(49)
b
c <- 1,2,3,4
c <- d(1,2,3,4)
a <- c(1,2,3,4,5)
a
a*c/c
a/c
is(a)
a <- 2
a[4]
a[4]
a[7]
a[123]
a <- numeric(10)
a
a <-3
typeof(a)
a <- c(1,2,3,4,5)
a
a[3]
a
summary(cars)
summary(flights)
str(cars)
View(cars)
View(cars)
names(cars)
names(flights)
flights$month
flights$sched_dep_time
qqnorm(cars$speed.of.car)
plot(cars$speed.of.car,cars$distance.of.car)
?cars
?qqnorm
qqnorm(cars$speed.of.car)
?nycflights13::flights
str(flights)
#attributes(cars.csv)
attributes(cars)
str(cars)
a <- 1
b <- 3
is(a)
#
is(a)
#
is(cars)
plot(cars$speed.of.car, cars$distance.of.car)
a
b
a +1
as.factor()
as.character()
b <- 3
b=4
b <- 3
cars <- 0
#carsDatasetName <- read.csv(".csv file")
cars <- read.csv("C:/Users/letic/Desktop/cars.csv")
cars <- 0
plot(cars$speed.of.car, cars$distance.of.car)
#carsDatasetName <- read.csv(".csv file")
cars <- read.csv("C:/Users/letic/Desktop/cars.csv")
flights$sched_dep_time<-as.character(flights$sched_dep_time)
?sched_dep_time
is(sched_dep_time)
str(sched_dep_time)
summary(flights)
flights$sched_dep_time<-as.numeric(flights$sched_dep_time)
summary(flights)
days(flights)<-c("day")
days(flights)<-c(day)
depDelay(flights)<-c(dep_delay)
distanceOfCar (cars) <- c(distance.of.car)
sumary(cars)
summary(cars)
summary(flights)
is.na(flights)
summary(flights)
is.na(flights)
source('~/.active-rstudio-document')
na.exclude(flights$dep_time)
flights$arr_delay[is.na(flights$arr_time)]<-mean(flights$arr_time,na.rm = TRUE)
flights$arr_delay[is.na(flights$arr_delay)]<-mean(flights$arr_delay,na.rm = TRUE)
#trocar o nome das colunas----
names(cars)
#trocar o nome das colunas----
names(cars) <- c("brand", "Car.Speedy" )
names(cars)
flights$arr_delay[is.na(flights$arr_delay)]<-mean(flights$arr_delay,na.rm = TRUE)
summary(flights)
is.na(flights)
sum(is.na(flights))
#starting point used to create a sequence of random numbers
set.seed(123)
set.seed(123)
testSize<-nrow(cars)-trainSize
trainSize<-round(nrow(cars)*0.7)
testSize<-nrow(cars)-trainSize
trainSize
testSize
trainSize<-round(nrow(flights)*0.7)
testSize<-nrow(flights)-trainSize
trainSize
testSize
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSize<-round(nrow(cars)*0.7)
testSize<-nrow(cars)-trainSize
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSet<-DatasetName[training_indices,]
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSet<-DatasetName[training_indices,]
trainSet<-cars[training_indices,]
testSet<-cars[-training_indices,]
#trocar o nome das colunas----
names(cars) <- c("brand", "Car.Speed", "Distance.to.Stop")
#trocar o nome das colunas----
names(cars) <- c("Brand", "Speed", "Distance")
Name your model<-lm(distance~ speed, trainSet)
predictionDistance<-lm(distance~ speed, trainSet)
predictionDistance<-lm(Distance~ Speed, trainSet)
trainSet<-cars[training_indices,]
testSet<-cars[-training_indices,]
predictionDistance<-lm(Distance~ Speed, trainSet)
predictionDistance<-lm(Distance~ Speed, trainSet)
summary(predictionDistance)
PredictionsName <- predict(predictionDistance,testSet)
PredictionsName
`plot(PredictionsName, testSet$Distance)
)
plot(PredictionsName, testSet$Distance)
plot(cars$Distance,predictionDistance)
plot(testSet, predictionDistance)
plot(testSet$Distance, predictionDistance)
plot(testSet$Distance, predictionDistance)
plot(predictionDistance, testSet$Distance)
plot(PredictionsName, testSet$Distance)
predictions
install.packages(readr)
install.packages(readR)
install.packages("readr")
library("readr")
IrisDataset <- read.csv(iris.csv)
IrisDataset <- read.csv("C:/Users/letic/Desktop/iris.csv")
View(IrisDataset)
View(IrisDataset)
attributes(IrisDataset)
summary(IrisDataset)
str(IrisDataset)
names(IrisDataset)
is(IrisDataset)
is(IrisDataset$Sepal.Length)
is(IrisDataset$Sepal.Width)
is(IrisDataset$Petal.Length)
is(IrisDataset$Petal.Width)
is(IrisDataset$Species)
str(iris)
unique(iris$Species)
is(iris$Species)
library(nycflights13)
head(flights)
hist(IrisDataset$Species)
hist(IrisDataset$Sepal.Length)
plot(IrisDataset$Sepal.Length)
plot(IrisDataset$Petal.Width, IrisDataset$Petal.Width)
qqnorm(IrisDataset)
qqnorm(IrisDataset$Petal.Length)
qqnorm(IrisDataset$Petal.Length, IrisDataset$Petal.Width)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
is(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.8)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSet
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSet
testSize <- nrow(IrisDataset) - trainSize
trainSize
testSize
trainSet <- IrisDataset[training_indices, ]
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
names(IrisDataset)
hist(IrisDataset$Sepal.Length)
#plot petal weidth x
plot(IrisDataset$Petal.Width, IrisDataset$Petal.Length) #relação linear
#qqnorm
qqnorm(IrisDataset$Petal.Length)
set.seed(300)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSize
trainSize
testSize
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
set.seed(405)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length)
summary(LinearModel)
prediction<-predict(LinearModeltestSet)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSize
#checando tamanho da amostra
trainSize
testSize
#criando os sets para train and test
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSize
#checando tamanho da amostra
trainSize
testSize
#definindo random value
set.seed(405)
#criando os sets para train and test
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#definindo random value
set.seed(75)
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#criar modelo
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length)
#criar modelo
LinearModel<- lm(Petal.Length~ Petal.Width, trainSet)
#entender
summary(LinearModel)
#métricas
summary(LinearModel)
#fazer predictions
prediction<-predict(LinearModel, testSet)
#ver as prediciotns
predictions
#ver as prediciotns
prediction
#ver as prediciotns
prediction
