testSize<-nrow(cars)-trainSize
trainSize<-round(nrow(cars)*0.7)
testSize<-nrow(cars)-trainSize
trainSize
testSize
trainSize<-round(nrow(flights)*0.7)
testSize<-nrow(flights)-trainSize
trainSize
testSize
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSize<-round(nrow(cars)*0.7)
testSize<-nrow(cars)-trainSize
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSet<-DatasetName[training_indices,]
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
trainSet<-DatasetName[training_indices,]
trainSet<-cars[training_indices,]
testSet<-cars[-training_indices,]
#trocar o nome das colunas----
names(cars) <- c("brand", "Car.Speed", "Distance.to.Stop")
#trocar o nome das colunas----
names(cars) <- c("Brand", "Speed", "Distance")
Name your model<-lm(distance~ speed, trainSet)
predictionDistance<-lm(distance~ speed, trainSet)
predictionDistance<-lm(Distance~ Speed, trainSet)
trainSet<-cars[training_indices,]
testSet<-cars[-training_indices,]
predictionDistance<-lm(Distance~ Speed, trainSet)
predictionDistance<-lm(Distance~ Speed, trainSet)
summary(predictionDistance)
PredictionsName <- predict(predictionDistance,testSet)
PredictionsName
`plot(PredictionsName, testSet$Distance)
)
plot(PredictionsName, testSet$Distance)
plot(cars$Distance,predictionDistance)
plot(testSet, predictionDistance)
plot(testSet$Distance, predictionDistance)
plot(testSet$Distance, predictionDistance)
plot(predictionDistance, testSet$Distance)
plot(PredictionsName, testSet$Distance)
predictions
install.packages(readr)
install.packages(readR)
install.packages("readr")
library("readr")
IrisDataset <- read.csv(iris.csv)
IrisDataset <- read.csv("C:/Users/letic/Desktop/iris.csv")
View(IrisDataset)
View(IrisDataset)
attributes(IrisDataset)
summary(IrisDataset)
str(IrisDataset)
names(IrisDataset)
is(IrisDataset)
is(IrisDataset$Sepal.Length)
is(IrisDataset$Sepal.Width)
is(IrisDataset$Petal.Length)
is(IrisDataset$Petal.Width)
is(IrisDataset$Species)
str(iris)
unique(iris$Species)
is(iris$Species)
library(nycflights13)
head(flights)
hist(IrisDataset$Species)
hist(IrisDataset$Sepal.Length)
plot(IrisDataset$Sepal.Length)
plot(IrisDataset$Petal.Width, IrisDataset$Petal.Width)
qqnorm(IrisDataset)
qqnorm(IrisDataset$Petal.Length)
qqnorm(IrisDataset$Petal.Length, IrisDataset$Petal.Width)
IrisDataset$Species<- as.numeric(IrisDataset$Species)
is(IrisDataset$Species)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.8)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSet
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSet
testSize <- nrow(IrisDataset) - trainSize
trainSize
testSize
trainSet <- IrisDataset[training_indices, ]
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
names(IrisDataset)
hist(IrisDataset$Sepal.Length)
#plot petal weidth x
plot(IrisDataset$Petal.Width, IrisDataset$Petal.Length) #relação linear
#qqnorm
qqnorm(IrisDataset$Petal.Length)
set.seed(300)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSize
trainSize
testSize
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
set.seed(405)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length)
summary(LinearModel)
prediction<-predict(LinearModeltestSet)
set.seed(123)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSize
#checando tamanho da amostra
trainSize
testSize
#criando os sets para train and test
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSize <- round(nrow(IrisDataset) * 0.7)
testSize <- nrow(IrisDataset) - trainSize
#checando tamanho da amostra
trainSize
testSize
#definindo random value
set.seed(405)
#criando os sets para train and test
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#definindo random value
set.seed(75)
training_indices<-sample(seq_len(nrow(IrisDataset)),size =trainSize)
trainSet <- IrisDataset[training_indices, ]
testSet <- IrisDataset[-training_indices, ]
#criar modelo
LinearModel<- lm(trainSet$Petal.Width ~ testingSet$Petal.Length)
#criar modelo
LinearModel<- lm(Petal.Length~ Petal.Width, trainSet)
#entender
summary(LinearModel)
#métricas
summary(LinearModel)
#fazer predictions
prediction<-predict(LinearModel, testSet)
#ver as prediciotns
predictions
#ver as prediciotns
prediction
#ver as prediciotns
prediction
plot(PredictionsName, testSet$Distance)
plot(PredictionsName, testSet$Distance)
plot(PredictionsName, testSet$Distance)
plot(PredictionsName, testSet$Distance)
plot(PredictionsName, trainingSet$Distance)
PredictionsName
PredictionsName <- predict(predictionDistance,testSet)
summary(predictionDistance)
testSize
training_indices<-sample(seq_len(nrow(cars)),size =trainSize)
predictionDistance<-lm(Distance~ Speed, trainSet)
predictionDistance<-lm(Distance~ Speed, trainSet)
#ver as prediciotns
prediction
plot(PredictionsName, testSet$Distance)
#ver as prediciotns
prediction
load("~/Ubiqum/start_with_R/.RData")
#livraria
library("readr")
#upload arquivo
IrisDataset <- read.csv("C:/Users/letic/Desktop/iris.csv")
View(IrisDataset)
View(IrisDataset)
#carsDatasetName <- read.csv(".csv file")
cars <- read.csv("C:/Users/letic/Desktop/cars.csv")
View(cars)
View(cars)
plot(prediction, testSet$Petal.Width)
#plotar pra ver se há uma boa relação
plot(prediction, testSet$Petal.Length)
plot(PredictionsName, testSet$Distance)
#ver as prediciotns
prediction
#qqnorm
qqnorm(IrisDataset$Petal.Length)
> install.packages("swirl")
install.packages("swirl")
#plotar pra ver se há uma boa relação
plot(prediction, testSet$Petal.Length)
abline(a = 0, b = 1)
#métricas
summary(LinearModel)
#chamar livraria
library("swirl")
#chamar livraria
library("swirl")
swirl
#chamar livraria
library(swirl)
swirl()
swirl()
#ler arquivo
exercise <- read.csv("C:/Users/letic/Desktop/exercise.csv")
#ler arquivo
exercise <- read.csv("C:/Users/letic/Desktop/exercise.csv")
View(exercise)
View(exercise)
bye()
summary(exercise)
summary(exercise)
#excluindo na
na.exclude(exercise$Species)
#checando se funcionou
summary(exercise)
#excluindo na
na.exclude(exercise$Species)
#excluindo na
na.exclude(exercise$Species)
#checando se funcionou
summary(exercise)
#não funcionou. tentar outro código
plants <- na.omit(exercise$Species)
plants <- na.omit(exercise$Species)
#excluindo na
na.exclude(exercise$Species)
na.exclude(exercise$Species)
#checando se funcionou
summary(exercise)
#checando se funcionou
summary(exercise)
plants
summary(plants)
plants <- exercise$Species
#não funcionou. tentar outro código
plants <- na.omit(exercise)
View(plants)
# example stack overflow
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA), z=c(NA, 33, 22))
View(DF)
DF
na.omit(DF)
na.omit(DF$y)
temp <- na.omit(DF)
View(temp)
temp <- na.omit(DF$y)
DF$x
DF[,1]
DF["x"]
DF[1,1]
DF[3,1]
DF[2:3,1]
DF[2:3,1:2]
#excluindo na
na.exclude(exercise$Species)
#excluindo na
flowers <- na.exclude(exercise$Species)
class(flowers)
class(exercise)
flowers <- exercise[2:30,2]
exercise[2:30,2]
flowers <- exercise[2:30,2:4]
View(flowers)
flowers <- exercise
#ler arquivo
exercise <- read.csv("C:/Users/letic/Desktop/exercise.csv")
flowers <- exercise[1:150,1:5]
flowers <- exercise
flowers[is.na(Species),]
flowers <- exercise
flowers[is.na(Species),]
flowers[is.na(flowers$Species),]
flowers[!is.na(flowers$Species),]
#procurando NA
temp <- summary(exercise)
temp
#excluindo na
flowers <- na.exclude(exercise$Species)
flowers <- flowers[!is.na(flowers$Species),]
flowers <- exercise
flowers <- flowers[!is.na(flowers$Species),]
View(flowers)
View(flowers)
swirl::swirl()
#ler arquivo
exercise <- read.csv("C:/Users/letic/Desktop/exercise.csv")
#procurando NA
summary(exercise)
#criar um objeto para fazer as alterações e não mudar o arquivo original
flowers <- exercise
#modificar o novo objeto.
flowers <- flowers[!is.na(flowers$Species),]
View(flowers)
View(flowers)
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
flowers <- flowers[!is.na(flowers$Species),]
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
#o que você não quer. Então é o dataset todo, SEM os missing values da coluna species
flowers <- flowers[!is.na(flowers$Species),]
flowers$Petal.Width[is.na(flowers$Petal.Width)]<-mean(flowers$Petal.Width,na.rm = TRUE)
View(flowers)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Length[is.na(flowers$Petal.Length)]<-mean(flowers$Petal.Length,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Width[is.na(flowers$Petal.Width)]<-mean(flowers$Petal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Length[is.na(flowers$Petal.Length)]<-mean(flowers$Petal.Length,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#ler arquivo
exercise <- read.csv("C:/Users/letic/Desktop/exercise.csv")
#procurando NA
summary(exercise)
#criar um objeto para fazer as alterações e não mudar o arquivo original
flowers <- exercise
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
#o que você não quer. Então é o dataset todo, SEM os missing values da coluna species
flowers <- flowers[!is.na(flowers$Species),]
#substituir por média os missing values em colunas numéricas
flowers$Petal.Width[is.na(flowers$Petal.Width)]<-mean(flowers$Petal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Length[is.na(flowers$Petal.Length)]<-mean(flowers$Petal.Length,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Length[is.na(flowers$Sepal.Length)]<-mean(flowers$Sepal.Length,na.rm = TRUE)
#mudar nome da coluna Species
names(flowers) <- c("Sepal.Length", "Sepal.Width", "Petal.Lenght", "Petal.Width", "Plants")
#Boxplotar as colunas e encontrar outliers
boxplot(flowers$Sepal.Length)
#saber o valor dos outliers
boxplot(flowers$disp)$out
#saber o valor dos outliers
boxplot(flowers$Sepal.Length)$out
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=FALSE)$out
#checando
print(outliers)
#achando outliers
flowers[which(flowers$Sepal.Length %in% outliers),]
#colocando dentro do objeto
flowers <- flowers[which(flowers$Sepal.Length %in% outliers),]
#boxplotar pra checar se está certo
boxplot(flowers$Sepal.Length)
#Boxplotar as colunas e encontrar outliers - Sepal Lenght
boxplot(flowers$Sepal.Length)
#Boxplotar as colunas e encontrar outliers - Sepal Width
boxplot(flowers$Sepal.Width)
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=TRUE)$out
#saber o valor dos outliers
boxplot(flowers$Sepal.Length)$out
#criar um objeto para fazer as alterações e não mudar o arquivo original
flowers <- exercise
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
#o que você não quer. Então é o dataset todo, SEM os missing values da coluna species
flowers <- flowers[!is.na(flowers$Species),]
#substituir por média os missing values em colunas numéricas
flowers$Petal.Width[is.na(flowers$Petal.Width)]<-mean(flowers$Petal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Length[is.na(flowers$Petal.Length)]<-mean(flowers$Petal.Length,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Length[is.na(flowers$Sepal.Length)]<-mean(flowers$Sepal.Length,na.rm = TRUE)
#mudar nome da coluna Species
names(flowers) <- c("Sepal.Length", "Sepal.Width", "Petal.Lenght", "Petal.Width", "Plants")
#Boxplotar as colunas e encontrar outliers - Sepal Lenght
boxplot(flowers$Sepal.Length)
#saber o valor dos outliers
boxplot(flowers$Sepal.Length)$out
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=TRUE)$out
#checando
print(outliers)
#saber o valor dos outliers
boxplot(flowers$Sepal.Length)$out
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=TRUE)$out
#checando
print(outliers)
#achando outliers
flowers[which(flowers$Sepal.Length %in% outliers),]
#colocando dentro do objeto
flowers <- flowers[which(flowers$Sepal.Length %in% outliers),]
#boxplotar pra checar se está certo
boxplot(flowers$Sepal.Length)
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
#o que você não quer. Então é o dataset todo, SEM os missing values da coluna species
flowers <- flowers[!is.na(flowers$Species),]
#criar um objeto para fazer as alterações e não mudar o arquivo original
flowers <- exercise
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
#o que você não quer. Então é o dataset todo, SEM os missing values da coluna species
flowers <- flowers[!is.na(flowers$Species),]
#substituir por média os missing values em colunas numéricas
flowers$Petal.Width[is.na(flowers$Petal.Width)]<-mean(flowers$Petal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Length[is.na(flowers$Petal.Length)]<-mean(flowers$Petal.Length,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Length[is.na(flowers$Sepal.Length)]<-mean(flowers$Sepal.Length,na.rm = TRUE)
#mudar nome da coluna Species
names(flowers) <- c("Sepal.Length", "Sepal.Width", "Petal.Lenght", "Petal.Width", "Plants")
#Boxplotar as colunas e encontrar outliers - Sepal Lenght
boxplot(flowers$Sepal.Length)
#saber o valor dos outliers
boxplot(flowers$Sepal.Length)$out
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=FALSE)$out
#checando
print(outliers)
#achando outliers
flowers[which(flowers$Sepal.Length %in% outliers),]
#colocando dentro do objeto
flowers <- flowers[!which(flowers$Sepal.Length %in% outliers),]
#criar um objeto para fazer as alterações e não mudar o arquivo original
flowers <- exercise
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
#o que você não quer. Então é o dataset todo, SEM os missing values da coluna species
flowers <- flowers[!is.na(flowers$Species),]
#substituir por média os missing values em colunas numéricas
flowers$Petal.Width[is.na(flowers$Petal.Width)]<-mean(flowers$Petal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Length[is.na(flowers$Petal.Length)]<-mean(flowers$Petal.Length,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Length[is.na(flowers$Sepal.Length)]<-mean(flowers$Sepal.Length,na.rm = TRUE)
#mudar nome da coluna Species
names(flowers) <- c("Sepal.Length", "Sepal.Width", "Petal.Lenght", "Petal.Width", "Plants")
#Boxplotar as colunas e encontrar outliers - Sepal Lenght
boxplot(flowers$Sepal.Length)
#saber o valor dos outliers
boxplot(flowers$Sepal.Length)$out
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=FALSE)$out
#checando
print(outliers)
#achando outliers
flowers[which(flowers$Sepal.Length %in% outliers),]
#colocando dentro do objeto
rose <- flowers[which(flowers$Sepal.Length %in% outliers),]
#boxplotar pra checar se está certo
boxplot(flowers$Sepal.Length)
#boxplotar pra checar se está certo
boxplot(flowers$Sepal.Length)
#subtrair o outlier (rose) do dataset (flowers)
flowers <- substr(flowers,rose)
#subtrair o outlier (rose) do dataset (flowers)
flowers <- substr(flowers-rose)
flowers <- flowers[-113,]
View(flowers)
View(flowers)
#criar um objeto para fazer as alterações e não mudar o arquivo original
flowers <- exercise
#modificar o novo objeto. sempre mandar a informação para dentro dele. ! significa
#o que você não quer. Então é o dataset todo, SEM os missing values da coluna species
flowers <- flowers[!is.na(flowers$Species),]
#substituir por média os missing values em colunas numéricas
flowers$Petal.Width[is.na(flowers$Petal.Width)]<-mean(flowers$Petal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Petal.Length[is.na(flowers$Petal.Length)]<-mean(flowers$Petal.Length,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Width[is.na(flowers$Sepal.Width)]<-mean(flowers$Sepal.Width,na.rm = TRUE)
#fazer o mesmo nas colunas seguintes que têm missing values
flowers$Sepal.Length[is.na(flowers$Sepal.Length)]<-mean(flowers$Sepal.Length,na.rm = TRUE)
#mudar nome da coluna Species
names(flowers) <- c("Sepal.Length", "Sepal.Width", "Petal.Lenght", "Petal.Width", "Plants")
#Boxplotar as colunas e encontrar outliers - Sepal Lenght
boxplot(flowers$Sepal.Length)
#eliminar linha
flowers <- flowers[-110,]
#boxplotar pra checar se está certo
boxplot(flowers$Sepal.Length)
#Boxplotar as colunas e encontrar outliers - Sepal Width
boxplot(flowers$Sepal.Width)
#saber o valor dos outliers
boxplot(flowers$Sepal.Width)$out
#Boxplotar as colunas e encontrar outliers - Sepal Width
boxplot(flowers$Sepal.Width)
#saber o valor dos outliers
boxplot(flowers$Sepal.Width)$out
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=FALSE)$out
#checando
print(outliers)
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Length, plot=FALSE)$out
#checando
print(outliers)
#saber o valor dos outliers
boxplot(flowers$Sepal.Width)$out
#Boxplotar as colunas e encontrar outliers - Sepal Width
boxplot(flowers$Sepal.Width)
#saber o valor dos outliers
boxplot(flowers$Sepal.Width)$out
#Boxplotar as colunas e encontrar outliers - Sepal Width
boxplot(flowers$Sepal.Width)
#saber o valor dos outliers
boxplot(flowers$Sepal.Width)$out
#colocando o outlier num vetor
outliers <- boxplot(flowers$Sepal.Width, plot=FALSE)$out
#checando --- Por que 4????
print(outliers)
#excluir linha outlier
flowers <- flowers[-28,]
#checar boxsplot
boxplot(flowers$Sepal.Width)
